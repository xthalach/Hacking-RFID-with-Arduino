Serial.begin(9600);		// Initialize serial communications with the PC
SPI.begin();			// Init SPI bus
mfrc522.PCD_Init();		// Init MFRC522
mfrc522.PCD_DumpVersionToSerial();	// Show details of PCD - MFRC522 Card Reader details
mfrc522.PICC_DumpDetailsToSerial(&(mfrc522.uid)); //dump some details about the card

---------//

//Llibreries necesaries
#include <SPI.h>
#include <MFRC522.h>

// Confirguraci√≥ dels pins respecte el tipus de arduino. 
#define RST_PIN         9          // Configurable, see typical pin layout above
#define SS_PIN          10         // Configurable, see typical pin layout above

// Per crear una istancia MFRC522 
MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance

// Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.
if ( ! mfrc522.PICC_IsNewCardPresent()) {
	return;
}

// Select one of the cards
if ( ! mfrc522.PICC_ReadCardSerial()) {
	return;
}

// Dump debug info about the card; PICC_HaltA() is automatically called
mfrc522.PICC_DumpToSerial(&(mfrc522.uid));

// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
MFRC522::MIFARE_Key key;
for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;

//Dump UID
Serial.print(F("Card UID:"));    
for (byte i = 0; i < mfrc522.uid.size; i++) {
  Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
  Serial.print(mfrc522.uid.uidByte[i], HEX);
}

// Dump PICC type
Serial.print(F(" PICC type: "));   
MFRC522::PICC_Type piccType = mfrc522.PICC_GetType(mfrc522.uid.sak);
Serial.println(mfrc522.PICC_GetTypeName(piccType));

// Variables necesaries per escriure data
byte buffer[34];
byte block;
MFRC522::StatusCode status;
byte len;

//Asking personal data: 
Serial.setTimeout(20000L) ;     // wait until 20 seconds for input from serial
// Ask personal data: Family name
Serial.println(F("Type Family name, ending with #"));
len = Serial.readBytesUntil('#', (char *) buffer, 30) ; // read family name from serial
for (byte i = len; i < 30; i++) buffer[i] = ' ';     // pad with spaces

// Authentication with key A 
block = 1;
//Serial.println(F("Authenticating using key A..."));
status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &key, &(mfrc522.uid));
if (status != MFRC522::STATUS_OK) {
  Serial.print(F("PCD_Authenticate() failed: "));
  Serial.println(mfrc522.GetStatusCodeName(status));
  return;
}
else Serial.println(F("PCD_Authenticate() success: "));

// Write block
status = mfrc522.MIFARE_Write(block, buffer, 16);
if (status != MFRC522::STATUS_OK) {
  Serial.print(F("MIFARE_Write() failed: "));
  Serial.println(mfrc522.GetStatusCodeName(status));
  return;
}
else Serial.println(F("MIFARE_Write() success: "));

// 
Serial.println(" ");
mfrc522.PICC_HaltA(); // Halt PICC
mfrc522.PCD_StopCrypto1();  // Stop encryption on PCD


B1+40+EA+3C

B140EA3C






